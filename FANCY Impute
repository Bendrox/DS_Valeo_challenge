 4.1.3 Solutions de FANCYIMPUTE (KNN, NuclearNormMinimization, SoftImpute, BiScaler) A FAIRE!!
from fancyimpute import IterativeImputer
from fancyimpute import KNN, NuclearNormMinimization, SoftImpute, BiScaler

# Conversion du DataFrame en un tableau NumPy
#X_train_array = X_train.values
# Instead of solving the nuclear norm objective directly, instead induce sparsity using singular value thresholding
#X_incomplete_normalized = BiScaler().fit_transform(X_train_array)
#X_filled_softimpute = SoftImpute().fit_transform(X_incomplete_normalized)
# Utilise KNN pour remblissage 
#X_filled_knn = KNN(k=3).fit_transform(X_train)
# matrix completion using convex optimization to find low-rank solution
# that still matches observed values. Slow!
#X_filled_nnm = NuclearNormMinimization().fit_transform(X_train_array)

# X_train has the same values as X except a subset have been replace with NaN

# Utilise KNN pour remblissage 
#X_filled_knn = KNN(k=3).fit_transform(X_train)

#print("knnImpute MSE: %f" % knn_mse)
# Calcul du MSE de chaque m√©thode
#nnm_mse = ((X_filled_nnm[missing_mask] - X[missing_mask]) ** 2).mean()
#print("Nuclear norm minimization MSE: %f" % nnm_mse)

#softImpute_mse = ((X_filled_softimpute[missing_mask] - X[missing_mask]) ** 2).mean()
#print("SoftImpute MSE: %f" % softImpute_mse)

#knn_mse = ((X_filled_knn[missing_mask] - X[missing_mask]) ** 2).mean()